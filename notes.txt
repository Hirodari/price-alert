Price alert Architecture

- common folder: Database code and Utils code -> email validation, password encryption and credentials validation
- libs: for 3rd party API's
- models: User-> user folder: decorators and user code, alert.py, item.py, model.py and store.py, model the model connect views to the Database, a page is processed from view's file and rendered by model files.
- views: alerts.py, items.py, stores.py and users. 
- static: this is where css, javascript and images can be stored
- templates: this is html templates are stored: alerts, items, stores, users, base.html and home.html 
- app.py is where Flask engine is initialized
- alert_updater.py: a script desiged to update alerts and initialize a notification if any

Deployment of flask app on heroku steps
ref to https://devcenter.heroku.com/articles/getting-started-with-python
on the root create the following file:
requirements.txt: put all installed dependencies as Flask, requests etc...
Procfile: web: uwsgi uwsgi.init
uwsgi.ini: put the text below
[uwsgi]
http-socket = :$(PORT)
master = true
die-on-terms = true
module = app:app
memory-report = true 


Creating Users profile

models: package -> user -> __init__.py
import models.user.errors as UserErrors
- user.py
	- find_by_email -> def
	- register_user -> def
	- json 			-> def


views:
- users: session, 
app.secret_key = os.urandom(64)

common: ->utils.py
	-Utils: email_is_valid	-> regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$' return a bool

password encryption is done with passlib

from passlib.hash import pbkdf2_sha512

view your own alerts
add user_email attributes to alerts


def send_simple_message():
	return requests.post(
		"https://api.mailgun.net/v3/sandbox2c1dcbcdc9254d048e36e6bd7871ebd5.mailgun.org/messages",
		auth=("api", "c6a92a5a2e19c9f7a4bde3b97770c25b-24e2ac64-e82c4dea"),
		data={"from": "Excited User <mailgun@YOUR_DOMAIN_NAME>",
			"to": ["bar@example.com", "YOU@YOUR_DOMAIN_NAME"],
			"subject": "Hello",
			"text": "Testing some Mailgun awesomness!"})


(base) fredbitenyo@hiro-Tools:~/Downloads/udemy/flask/chair-price$ heroku create price-1
Creating â¬¢ price-1... done
https://price-1.herokuapp.com/ | https://git.heroku.com/price-1.git


API key: 

API base URL: 

Heruko

heroku --version
heroku login
heroku create

Create a new Git repository
Initialize a git repository in a new or existing directory

$ cd my-project/
$ git init
$ heroku git:remote -a training-blog-fred
Deploy your application
Commit your code to the repository and deploy it to Heroku using Git.

$ git add .
$ git commit -am "make it better"
$ git push heroku master
Existing Git repository
For existing repositories, simply add the heroku remote

$ heroku git:remote -a training-blog-fred

git add -A
git commit -m #This is very important to commit make sure the configs were saved
heroku keys:add
git push heroku master
heroku rename alpha_blog_fred
## to migrate the DB
heroku run rails db:migrate
#very important
heroku logs
heroku open
heroku maintenance:off
heroku run rails console
